    - name: copy template files after apply jinja2 filters to them.
      template:
        src: "deploy-{{ item }}.yaml"
        dest: "/root/deploy-{{ item }}.yaml"
      with_items:
        - "{{ gitlab_deploy_suffix_name }}"
        - "{{ jenkins_deploy_suffix_name }}"
        - "{{ sonarqube_deploy_suffix_name }}"
        - "{{ nexus_deploy_suffix_name }}"

    - name: check namespace "{{ namespace }}" exist or not
      command: kubectl get ns "{{ namespace }}"
      register: result
      ignore_errors: True

    - name: create namspace "{{ namespace }}" when it is not there
      command: kubectl create ns "{{ namespace }}"
      register: ns_created
      ignore_errors: True
      when: result|failed
# Ansible can not guarantee idempotency for applications on k8s cluster
# We have to do it by ourself to validate the status of the deployments, pods,
# containers, and services.
# Create deplyments, pods and containers
# GitLab
    - name: check deployment "{{ namespace }}-{{ gitlab_deploy_suffix_name }}"  exist or not in namespace "{{ namespace }}"
      command: "kubectl get deploy {{ namespace }}-{{ gitlab_deploy_suffix_name }} --namespace={{ namespace }}"
      register: gitlab_exist
      ignore_errors: True
      when: ns_created|succeeded

    - name: If "{{ gitlab_deploy_suffix_name }}" does not exist in namespace "{{ namespace }}", deploy it  .
      command: kubectl create -f deploy-gitlab.yaml
      register: gitlab_created
      ignore_errors: True
      when: gitlab_exist|failed

    - name: "Report: Failed to create {{ gitlab_deploy_suffix_name }} in namespace {{ namespace }}"
      command: echo "failed to create {{ gitlab_deploy_suffix_name }}" in namespace "{{ namespace }}"
      when: gitlab_created|failed
# Jenkins
    - name: check deployment "{{ namespace }}-{{ jenkins_deploy_suffix_name }}"  exist or not in namespace "{{ namespace }}"
      command: "kubectl get deploy {{ namespace }}-{{ jenkins_deploy_suffix_name }} --namespace={{ namespace }}"
      register: jenkins_exist
      ignore_errors: True

    - name: If "{{ jenkins_deploy_suffix_name }}" does not exist in namespace "{{ namespace }}", deploy it  .
      command: kubectl create -f deploy-jenkins.yaml
      register: jenkins_created
      ignore_errors: True
      when: jenkins_exist|failed

    - name: "Report: Failed to create {{ jenkins_deploy_suffix_name }} in namespace {{ namespace }}"
      command:  echo "failed to create {{ jenkins_deploy_suffix_name }}" in namespace "{{ namespace }}"
      when: jenkins_created|failed

# SonarQube
    - name: check deployment "{{ namespace }}-{{ sonarqube_deploy_suffix_name }}"  exist or not in namespace "{{ namespace }}"
      command: "kubectl get deploy {{ namespace }}-{{ sonarqube_deploy_suffix_name }} --namespace={{ namespace }}"
      register: sonarqube_exist
      ignore_errors: True

    - name: If "{{ sonarqube_deploy_suffix_name }}" does not exist in namespace "{{ namespace }}", deploy it  .
      command: kubectl create -f deploy-sonarqube.yaml
      register: sonarqube_created
      ignore_errors: True
      when: sonarqube_exist|failed

    - name: "Report: Failed to create {{ sonarqube_deploy_suffix_name }} in namespace {{ namespace }}"
      command:  echo "failed to create {{ sonarqube_deploy_suffix_name }}" in namespace "{{ namespace }}"
      when: sonarqube_created|failed
# Nexus

    - name: check deployment "{{ namespace }}-{{ nexus_deploy_suffix_name }}"  exist or not in namespace "{{ namespace }}"
      command: "kubectl get deploy {{ namespace }}-{{ nexus_deploy_suffix_name }} --namespace={{ namespace }}"
      register: nexus_exist
      ignore_errors: True

    - name: If "{{ nexus_deploy_suffix_name }}" does not exist in namespace "{{ namespace }}", deploy it  .
      command: kubectl create -f deploy-nexus.yaml
      register: nexus_created
      ignore_errors: True
      when: nexus_exist|failed

    - name: "Report: Failed to create {{ nexus_deploy_suffix_name }} in namespace {{ namespace }}"
      command:  echo "failed to create {{ nexus_deploy_suffix_name }}" in namespace "{{ namespace }}"
      when: nexus_created|failed

# Service
    - name: start to create services
      command: echo ""
      notify:
        - create jenkins service
        - create sonarqube service
        - create nexus service
        - create gitlab service
